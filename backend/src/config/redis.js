const Redis = require('ioredis');
const { promisify } = require('util');

// Configuraci√≥n de conexi√≥n, lee de variables de entorno o usa valores por defecto
let redisConfig;

// Si hay un URL completo de Redis
if (process.env.REDIS_URL) {
  console.log(`üîÑ Conectando a Redis usando URL: ${process.env.REDIS_URL}`);
  redisConfig = process.env.REDIS_URL;
} else {
  // Configuraci√≥n detallada para conexi√≥n local
  redisConfig = {
    host: process.env.REDIS_HOST || 'localhost',
    port: process.env.REDIS_PORT || 6379,
    password: process.env.REDIS_PASSWORD || '',
    // Tiempo de reconexi√≥n en ms
    retryStrategy: (times) => {
      const delay = Math.min(times * 50, 2000);
      return delay;
    }
  };
}

// Configuraci√≥n de tiempos de expiraci√≥n (en segundos)
const EXPIRATION_TIMES = {
  // Tiempo de expiraci√≥n por defecto: 1 hora
  DEFAULT: 60 * 60,
  // Tiempos espec√≠ficos por tipo de datos
  SESSION: 7 * 24 * 60 * 60, // Sesiones: 7 d√≠as
  TOKEN: 30 * 24 * 60 * 60,  // Tokens: 30 d√≠as
  CACHE_SHORT: 5 * 60,       // Cach√© de corta duraci√≥n: 5 minutos
  CACHE_MEDIUM: 60 * 60,     // Cach√© de media duraci√≥n: 1 hora
  CACHE_LONG: 24 * 60 * 60,  // Cach√© de larga duraci√≥n: 1 d√≠a
};

// Prefijos para diferentes tipos de datos
const KEY_PREFIXES = {
  SESSION: 'session:',
  TOKENS: 'spotify_tokens:',
  CACHE: 'cache:',
  PLAYBACK: 'playback:',
  USER: 'user:'
};

// Variables para monitoreo y estado
let redisIsConnected = false;
let redisIsReady = false;
let lastHealthCheck = null;
let keysCount = 0;

// Crear cliente de Redis
const redisClient = new Redis(redisConfig);

// Manejar errores de conexi√≥n
redisClient.on('error', (err) => {
  console.error('Error en conexi√≥n Redis:', err);
  redisIsConnected = false;
});

// Mensaje cuando la conexi√≥n es exitosa
redisClient.on('connect', () => {
  console.log('‚úÖ Conexi√≥n exitosa a Redis');
  redisIsConnected = true;
});

// Cuando el cliente est√° listo
redisClient.on('ready', () => {
  console.log('‚úÖ Cliente Redis listo para recibir comandos');
  redisIsReady = true;
  
  // Realizar comprobaci√≥n de salud inicial
  performHealthCheck();
});

// Cuando se cierra la conexi√≥n
redisClient.on('close', () => {
  console.log('‚ùå Conexi√≥n a Redis cerrada');
  redisIsConnected = false;
  redisIsReady = false;
});

/**
 * Realiza una verificaci√≥n de salud del sistema Redis
 * - Comprueba el n√∫mero de claves
 * - Verifica el uso de memoria
 */
async function performHealthCheck() {
  if (!redisIsConnected || !redisIsReady) return;
  
  try {
    // Obtener estad√≠sticas de Redis
    const info = await redisClient.info();
    const keyspace = await redisClient.info('keyspace');
    
    // An√°lisis b√°sico de uso de memoria
    const memoryMatch = info.match(/used_memory_human:(.+?)\r\n/);
    const memory = memoryMatch ? memoryMatch[1].trim() : 'N/A';
    
    // An√°lisis de claves
    const dbMatch = keyspace.match(/db0:keys=(\d+),expires=(\d+)/);
    if (dbMatch) {
      const totalKeys = parseInt(dbMatch[1]);
      const keysWithExpiry = parseInt(dbMatch[2]);
      const keysWithoutExpiry = totalKeys - keysWithExpiry;
      
      keysCount = totalKeys;
      
      console.log(`üìä Redis: ${totalKeys} claves totales, ${keysWithoutExpiry} sin expiraci√≥n`);
      console.log(`üíæ Redis: Memoria utilizada ${memory}`);
      
      // Alerta si hay muchas claves sin expiraci√≥n
      if (keysWithoutExpiry > 100) {
        console.warn(`‚ö†Ô∏è Redis: Detectadas ${keysWithoutExpiry} claves sin tiempo de expiraci√≥n`);
      }
    }
    
    lastHealthCheck = Date.now();
  } catch (error) {
    console.error('Error al realizar health check de Redis:', error);
  }
}

// Programar verificaci√≥n de salud peri√≥dica (cada 30 minutos)
const healthCheckInterval = setInterval(performHealthCheck, 30 * 60 * 1000);
healthCheckInterval.unref(); // No bloquear la terminaci√≥n de Node.js

/**
 * Determina el tiempo de expiraci√≥n m√°s adecuado basado en el tipo de clave
 * @param {string} key - Clave a analizar
 * @param {number|null} requestedExpiry - Tiempo de expiraci√≥n solicitado
 * @returns {number} - Tiempo de expiraci√≥n en segundos
 */
function determineExpiry(key, requestedExpiry = null) {
  // Si se especifica un tiempo de expiraci√≥n, usarlo
  if (requestedExpiry) return requestedExpiry;
  
  // Determinar expiraci√≥n basada en prefijo
  if (key.startsWith(KEY_PREFIXES.SESSION)) return EXPIRATION_TIMES.SESSION;
  if (key.startsWith(KEY_PREFIXES.TOKENS)) return EXPIRATION_TIMES.TOKEN;
  if (key.startsWith(KEY_PREFIXES.PLAYBACK)) return EXPIRATION_TIMES.CACHE_SHORT;
  if (key.startsWith(KEY_PREFIXES.CACHE)) return EXPIRATION_TIMES.CACHE_MEDIUM;
  
  // Tiempo predeterminado
  return EXPIRATION_TIMES.DEFAULT;
}

// M√©todos as√≠ncronos mejorados
const getAsync = async (key) => {
  try {
    const value = await redisClient.get(key);
    return value ? JSON.parse(value) : null;
  } catch (err) {
    console.error('Error al obtener de Redis:', err);
    return null;
  }
};

/**
 * Guarda un valor en Redis con tiempo de expiraci√≥n obligatorio
 * @param {string} key - Clave a guardar
 * @param {any} value - Valor a guardar
 * @param {number|null} expireTime - Tiempo de expiraci√≥n en segundos
 * @returns {Promise<boolean>} - True si se guard√≥ correctamente
 */
const setAsync = async (key, value, expireTime = null) => {
  try {
    const stringValue = JSON.stringify(value);
    
    // Determinar tiempo de expiraci√≥n apropiado
    const ttl = determineExpiry(key, expireTime);
    
    // Siempre usar EX para garantizar que todas las claves tengan expiraci√≥n
    await redisClient.set(key, stringValue, 'EX', ttl);
    
    return true;
  } catch (err) {
    console.error('Error al guardar en Redis:', err);
    return false;
  }
};

/**
 * Elimina una clave de Redis
 */
const deleteAsync = async (key) => {
  try {
    await redisClient.del(key);
    return true;
  } catch (err) {
    console.error('Error al eliminar de Redis:', err);
    return false;
  }
};

/**
 * Obtiene el tiempo de vida restante de una clave en segundos
 * @param {string} key - Clave a consultar
 * @returns {Promise<number>} - Segundos restantes, 0 si no existe o no tiene TTL
 */
const getTTL = async (key) => {
  try {
    const ttl = await redisClient.ttl(key);
    return ttl > 0 ? ttl : 0;
  } catch (err) {
    console.error('Error al obtener TTL de Redis:', err);
    return 0;
  }
};

/**
 * Renueva el tiempo de expiraci√≥n de una clave
 * @param {string} key - Clave a renovar
 * @param {number|null} expireTime - Nuevo tiempo de expiraci√≥n
 * @returns {Promise<boolean>} - True si se renov√≥ correctamente
 */
const renewExpiry = async (key, expireTime = null) => {
  try {
    // Determinar tiempo de expiraci√≥n apropiado
    const ttl = determineExpiry(key, expireTime);
    
    // Establecer nueva expiraci√≥n
    await redisClient.expire(key, ttl);
    return true;
  } catch (err) {
    console.error('Error al renovar expiraci√≥n en Redis:', err);
    return false;
  }
};

/**
 * Obtiene informaci√≥n sobre el n√∫mero de claves en Redis
 * @returns {Promise<Object>} - Estad√≠sticas de claves
 */
const getKeysStats = async () => {
  if (!redisIsConnected || !redisIsReady) {
    return { error: 'Redis no est√° conectado' };
  }
  
  try {
    // Actualizar conteo si no est√° reciente
    if (!lastHealthCheck || Date.now() - lastHealthCheck > 60000) {
      await performHealthCheck();
    }
    
    return {
      totalKeys: keysCount,
      lastCheck: lastHealthCheck
    };
  } catch (error) {
    console.error('Error al obtener estad√≠sticas de claves:', error);
    return { error: 'Error al obtener estad√≠sticas' };
  }
};

// Exportar el cliente y m√©todos √∫tiles
module.exports = {
  redisClient,
  redisIsConnected: () => redisIsConnected,
  redisIsReady: () => redisIsReady,
  // Constantes de configuraci√≥n
  DEFAULT_EXPIRATION: EXPIRATION_TIMES.DEFAULT,
  EXPIRATION_TIMES,
  KEY_PREFIXES,
  // M√©todos b√°sicos
  getAsync,
  setAsync,
  deleteAsync,
  // M√©todos adicionales
  getTTL,
  renewExpiry,
  getKeysStats,
  performHealthCheck
};
